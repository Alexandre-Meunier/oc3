// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /daemon/status)
	PostDaemonStatus(ctx echo.Context) error

	// (POST /daemon/system)
	PostDaemonSystem(ctx echo.Context) error

	// (GET /public/openapi)
	GetSwagger(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostDaemonStatus converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostDaemonStatus(ctx)
	return err
}

// PostDaemonSystem converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonSystem(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostDaemonSystem(ctx)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/daemon/status", wrapper.PostDaemonStatus)
	router.POST(baseURL+"/daemon/system", wrapper.PostDaemonSystem)
	router.GET(baseURL+"/public/openapi", wrapper.GetSwagger)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xWTY/bRgz9K8S0hwRQ/RGnLaCekqbbbFt0F7GDHmwfxiNamkAaTjiUE8fQfy9Gs/Z6",
	"He82RYtFDz1Z1jyST3yPlHbKUOPJoZOg8p1iDJ5cwP7Ps9Eo/hhygk7ipfa+tkaLJTd8F8jFe8FU2Oh4",
	"9TXjWuXqq+FtzmE6DcNrplWNjeq6LlMFBsPWxzQqV1e/qi5Tzx+n2EtdwBt832KQVHX8GFXfOt1KRWw/",
	"YZHKTh6j7AXxyhYFuljz28dp8KUTZKdrmCJvkOEnZmIVcTfBMfc+Pt8pz+SRxSbLFSja1unqOOsLqNpG",
	"u28YdaFXNQJ+9LV2PXcIHo1dWwNCIJUNQMa0zOgMAq1BKlw4nyoOFk5lSrYeVa6CsHVl7E0QLW34vOys",
	"Qng9m11DAoChAuHJ/M3Fj98/m4yXGUzR9BS+ewolOmQtWMBqm2oS29I6CKkRa+J72ME5ctYJlsiRnVip",
	"8VxPQkUs2WlrQts0mrcnySHmHQBcCkxfX7397dXC/X41A1NpVyKsmZpjYkL308wAPxr0snDxkXzLngKG",
	"CKrJ6Np+Sqo8wUE5yKAN1pUxVBuxG4Qb/y2cw5LE9tgfICDCmbZOBs+fnpWsyxTj+9YyFiqf721zEHLf",
	"s+UhkFbv0PQjH7ZBkvVOjuIZmpatbKfRqsmRKx2sedFKdZiOGNPfvaVVifiYe4Wakffo9O+CuNGicvXL",
	"HzOVHaXoT09zRBbWrannl3RX5NGFjQFDdY1GiEF7qzK1QQ7JCqPBaDCOBCI0HuZqMhgNRipTXkvVP8iw",
	"0NiQG9563VOQz211TUEgYfe231j8kCziqMAkSJzaXrzL4iboVR8z3Stw7lVybqcccMMIun0TPIx9vseO",
	"vwQ7Plq6f4WdHC3Lh7ERdOwalc/v+GW+7LLdHU/Ml120pC5DdK0u4yJexhQHcQ7m/AJxeiwUNhjaIG8f",
	"liUlTmODQV5Ssf3XXgc3rLu7YyncYve/D/6eD3y7qq0ZHuZ4p0rs1bkr7M8o0w+6LPsF8o8+2k6X4L2f",
	"Z/+BBu8blpoUO9Z1fwYAAP//TlV41sIKAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
