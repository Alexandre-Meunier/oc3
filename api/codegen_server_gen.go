// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /daemon/status/{nodename})
	PostDaemonStatus(ctx echo.Context, nodename InPathNodeName) error

	// (POST /daemon/system)
	PostDaemonSystem(ctx echo.Context) error

	// (GET /public/openapi)
	GetSwagger(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostDaemonStatus converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nodename" -------------
	var nodename InPathNodeName

	err = runtime.BindStyledParameterWithLocation("simple", false, "nodename", runtime.ParamLocationPath, ctx.Param("nodename"), &nodename)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostDaemonStatus(ctx, nodename)
	return err
}

// PostDaemonSystem converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonSystem(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostDaemonSystem(ctx)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/daemon/status/:nodename", wrapper.PostDaemonStatus)
	router.POST(baseURL+"/daemon/system", wrapper.PostDaemonSystem)
	router.GET(baseURL+"/public/openapi", wrapper.GetSwagger)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xW32/bNhD+VwhuDy2gWU6dbYD31K7rmm1IgtrFHmw/0NRZYiGR7PHkxjX0vw9Hxrbi",
	"OFmHDdke9mSZ/O6HvvvuTlupXeOdBUtBjrfSK1QNEGD8Z+y1ourSFXCpGkgnciy9okpm0sYzaV0B8TGT",
	"CB9bg1DIMWELmQy6gkaxHdyoxtcMr51WdeUCyUzSxvNRIDS2lF3XsYvgnQ0Q478YDvlHO0tgiR+V97XR",
	"ioyz+YfgLJ8donyNsJJj+VV+eKk83Yb8Gt2yhiZFKSBoNJ7dyLG8+lV2mTx/mmCvVCHewccWAqWoZ08R",
	"9b1VLVUOzWcoUtjRv/Cy3z4NxReWAK2qxQRwDSh+QnQoGXdrzL539ix6dB6QTBJdAaRMnZ76Xl+Kqm2U",
	"/QZBFWpZg4AbXysbcxfBgzYrowU5QZUJwmndIoLVINxKUAVz61PEwdzel34mAylqw/2w0wrE2+n0WiSA",
	"0K4A8Wz27s2P378YnS0yMQEdU/juuSjBAiqCQiw3KaZDUxorQiJi5fCB7MSp5IwlKAE5OzJUwylOQuWQ",
	"smNqQts0CjdHzgX7HQhxQWLy9ur9b6/n9vJqKnSlbAliha7pJ0bu4TQzATcaPM0tv5Jv0bsAgUFxvJjP",
	"qSrPYFAOMtEGY0s2VZrMGsSt/ubWQunIROwPIgCIE7SOBufPT5as68+72U42+0LuOFvsDd3yA+jYB2ET",
	"KEnv6IrvQLdoaDNhqSZFLlUw+mVL1b472CaeHtKqiDz7XoJCwB06/XvjsFEkx/KX36cy67mIt8c+OAtj",
	"Vy7ml+ounQcb1lpoV9egyaFQ3shMrgFDksJwMByccQIM5cuxHA2Gg6HM4r6IL5IXChpn80RRvt2tji52",
	"Ie+Eewq7doFEMtt1wNrAp6QWtk+14QaOdbwobo1eR5vJrhj9xTY7PVkOkPxo8XWL04vplJc9LmfQYa88",
	"jj3fYc++BHvWG+F/hh31Bu/jWAb1FRiJ6mlvtuiy7R19zRbMDKmSSZWq5KG+YBf7Qu+F/gXVjVhRmKDd",
	"GnDzeF2T49SCEOiVKzb/2Gq5zbq72+L8SdP9r4O/pgPfLmuj8/1M2MoSYnXuFvZnoMknVZZxGP2tT8Dj",
	"gfrgx95/gOAdYYkkZqzr/ggAAP//TK9G65ELAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
